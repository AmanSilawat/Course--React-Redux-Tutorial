import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';
import { client } from '../../api/client';

// const initialState = [];

const usersAdapter = createEntityAdapter();
const initialState = usersAdapter.getInitialState();

// Redux Toolkit's createAsyncThunk API generates thunks that
// automatically dispatch those "start/success/failure" actions for you.
export const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {
    const response = await client.get('/fakeApi/users');
    return response.users;
    // Our payload creation callback waits for the API call to return a response
})
// The thunks generated by createAsyncThunk will always return a resolved promise with either the fulfilled action object or rejected action object inside, as appropriate.

const usersSlice = createSlice({
    name: 'users',
    initialState,
    reducers: {},
    extraReducers: {
        // [fetchUsers.fulfilled]: (state, action) => {
        //     return action.payload
        // }
        [fetchUsers.fulfilled]: usersAdapter.setAll
    }
})

export default usersSlice.reducer

export const { selectAll: selectAllUsers, selectById: selectUserById } = usersAdapter.getSelectors(state => state.users);